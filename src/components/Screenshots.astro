---
const screenshots = [
    "/images/capturas/Screenshot1.jpg",
    "/images/capturas/Screenshot2.jpg",
    "/images/capturas/Screenshot3.jpg",
    "/images/capturas/Screenshot4.jpg",
    "/images/capturas/Screenshot5.jpg",
    "/images/capturas/Screenshot6.jpg",
    "/images/capturas/Screenshot7.jpg",
    "/images/capturas/Screenshot8.jpg",
];
---

<section id="screenshots" class="screenshots-section">
    <h2>Capturas de Pantalla</h2>
    <div class="carousel-container">
        <button class="nav-button prev" aria-label="Imagen anterior">
            <svg
                xmlns="http://www.w3.org/2000/svg"
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
            >
                <path d="M15 18l-6-6 6-6"></path>
            </svg>
        </button>

        <div class="screenshots-grid">
            <div class="carousel-track">
                {
                    screenshots.map((screenshot, index) => (
                        <div class="screenshot-card" data-index={index}>
                            <img
                                src={screenshot}
                                alt={`Captura de pantalla ${index + 1} de Biblia y Himnos Pro`}
                                loading="lazy"
                            />
                        </div>
                    ))
                }
            </div>
        </div>

        <button class="nav-button next" aria-label="Siguiente imagen">
            <svg
                xmlns="http://www.w3.org/2000/svg"
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
            >
                <path d="M9 18l6-6-6-6"></path>
            </svg>
        </button>
    </div>
    
    <!-- Indicadores de posición -->
    <div class="carousel-indicators">
        {
            screenshots.map((_, index) => (
                <button 
                    class="indicator" 
                    data-index={index}
                    aria-label={`Ir a imagen ${index + 1}`}
                ></button>
            ))
        }
    </div>
</section>

<style>
    .screenshots-section {
        padding: 4rem 1rem;
        max-width: 1200px;
        margin: 0 auto;
    }

    h2 {
        text-align: center;
        margin-bottom: 2rem;
        color: var(--color-primary-dark);
    }

    .carousel-container {
        position: relative;
        display: flex;
        align-items: center;
        gap: 1rem;
        max-width: 900px;
        margin: 0 auto 2rem;
    }

    .screenshots-grid {
        overflow: hidden;
        position: relative;
        border-radius: 16px;
        box-shadow: 0 8px 32px rgba(148, 185, 255, 0.2);
    }

    .carousel-track {
        display: flex;
        gap: 1.5rem;
        transition: transform 0.5s cubic-bezier(0.4, 0, 0.2, 1);
        width: fit-content;
        transform-style: preserve-3d;
    }

    .screenshot-card {
        flex: 0 0 calc(33.333% - 1rem);
        min-width: calc(33.333% - 1rem);
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 4px 20px rgba(148, 185, 255, 0.2);
        background: white;
        padding: 0.5rem;
        transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
        transform: scale(0.85) rotateY(15deg);
        opacity: 0.7;
    }

    .screenshot-card img {
        width: 100%;
        height: auto;
        display: block;
        border-radius: 8px;
        transition: transform 0.3s ease;
    }

    .screenshot-card.active {
        transform: scale(1) rotateY(0deg);
        opacity: 1;
        z-index: 2;
        box-shadow: 0 8px 40px rgba(148, 185, 255, 0.4);
    }

    .screenshot-card:hover img {
        transform: scale(1.05);
    }

    .nav-button {
        background: rgba(255, 255, 255, 0.95);
        color: var(--color-primary);
        border: 2px solid var(--color-primary);
        width: 50px;
        height: 50px;
        border-radius: 50%;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        backdrop-filter: blur(8px);
        box-shadow: 0 4px 16px rgba(148, 185, 255, 0.3);
        z-index: 10;
    }

    .nav-button:hover {
        background: var(--color-primary);
        color: white;
        transform: scale(1.1);
        box-shadow: 0 6px 24px rgba(148, 185, 255, 0.4);
    }

    .nav-button:active {
        transform: scale(0.95);
    }

    .nav-button:disabled {
        opacity: 0.4;
        cursor: not-allowed;
        background: rgba(255, 255, 255, 0.5);
        transform: none;
    }

    .nav-button svg {
        width: 24px;
        height: 24px;
    }

    /* Indicadores */
    .carousel-indicators {
        display: flex;
        justify-content: center;
        gap: 0.75rem;
        margin-top: 1.5rem;
    }

    .indicator {
        width: 12px;
        height: 12px;
        border-radius: 50%;
        border: 2px solid var(--color-primary);
        background: transparent;
        cursor: pointer;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        position: relative;
    }

    .indicator:hover {
        transform: scale(1.2);
        background: rgba(107, 157, 255, 0.3);
    }

    .indicator.active {
        background: var(--color-primary);
        transform: scale(1.3);
        box-shadow: 0 0 0 3px rgba(107, 157, 255, 0.3);
    }

    .indicator::after {
        content: '';
        position: absolute;
        top: -8px;
        left: -8px;
        right: -8px;
        bottom: -8px;
        border-radius: 50%;
        background: transparent;
    }

    /* Soporte táctil */
    .screenshots-grid {
        touch-action: pan-x;
        -webkit-overflow-scrolling: touch;
    }

    @media (max-width: 768px) {
        .screenshot-card {
            flex: 0 0 calc(90% - 1rem);
            min-width: calc(90% - 1rem);
            transform: scale(0.9);
        }
        
        .screenshot-card.active {
            transform: scale(1);
        }

        .screenshots-section {
            padding: 3rem 1rem;
        }
        
        .nav-button {
            width: 45px;
            height: 45px;
        }

        .nav-button svg {
            width: 20px;
            height: 20px;
        }
        
        .carousel-container {
            gap: 0.5rem;
        }
        
        .indicator {
            width: 10px;
            height: 10px;
        }
    }
</style>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        const track = document.querySelector(".carousel-track") as HTMLElement;
        const cards = document.querySelectorAll(".screenshot-card");
        const prevButton = document.querySelector(".prev") as HTMLButtonElement;
        const nextButton = document.querySelector(".next") as HTMLButtonElement;
        const indicators = document.querySelectorAll(".indicator");

        if (!track || !prevButton || !nextButton || !cards.length) return;

        let currentIndex = 0;
        const totalCards = cards.length;
        let startX = 0;
        let currentX = 0;
        let isDragging = false;

        function updateCarousel() {
            const cardWidth = (cards[0] as HTMLElement).offsetWidth;
            const gap = 24;
            const offset = (cardWidth + gap) * currentIndex;
            
            track.style.transform = `translateX(-${offset}px)`;

            // Actualizar clases active
            cards.forEach((card, index) => {
                card.classList.toggle("active", index === currentIndex);
            });
            
            // Actualizar indicadores
            indicators.forEach((indicator, index) => {
                indicator.classList.toggle("active", index === currentIndex);
            });

            // Actualizar botones
            prevButton.disabled = currentIndex === 0;
            nextButton.disabled = currentIndex === totalCards - 1;
        }

        function goToSlide(index: number) {
            currentIndex = Math.max(0, Math.min(index, totalCards - 1));
            updateCarousel();
        }

        // Navegación con botones
        prevButton.addEventListener("click", () => {
            goToSlide(currentIndex - 1);
        });

        nextButton.addEventListener("click", () => {
            goToSlide(currentIndex + 1);
        });

        // Navegación con indicadores
        indicators.forEach((indicator, index) => {
            indicator.addEventListener("click", () => {
                goToSlide(index);
            });
        });

        // Soporte táctil
        track.addEventListener("touchstart", (e) => {
            startX = e.touches[0].clientX;
            isDragging = true;
            track.style.transition = "none";
        });

        track.addEventListener("touchmove", (e) => {
            if (!isDragging) return;
            e.preventDefault();
            currentX = e.touches[0].clientX;
        });

        track.addEventListener("touchend", () => {
            if (!isDragging) return;
            isDragging = false;
            track.style.transition = "transform 0.5s cubic-bezier(0.4, 0, 0.2, 1)";
            
            const deltaX = startX - currentX;
            const threshold = 50;
            
            if (Math.abs(deltaX) > threshold) {
                if (deltaX > 0 && currentIndex < totalCards - 1) {
                    goToSlide(currentIndex + 1);
                } else if (deltaX < 0 && currentIndex > 0) {
                    goToSlide(currentIndex - 1);
                }
            }
        });

        // Navegación con teclado
        document.addEventListener("keydown", (e) => {
            if (e.key === "ArrowLeft") {
                goToSlide(currentIndex - 1);
            } else if (e.key === "ArrowRight") {
                goToSlide(currentIndex + 1);
            }
        });

        // Auto-play opcional (comentado por defecto)
        // setInterval(() => {
        //     if (currentIndex < totalCards - 1) {
        //         goToSlide(currentIndex + 1);
        //     } else {
        //         goToSlide(0);
        //     }
        // }, 5000);

        // Inicializar
        updateCarousel();

        // Actualizar en resize
        window.addEventListener("resize", () => {
            updateCarousel();
        });
    });
</script>